-- ===================================================================
-- ü¶∑ Dental Clinic Management System (Full Version, Cleaned)
-- SQL Server Script - Complete schema + seed data (no trigger)
-- ===================================================================

USE master;
IF DB_ID('DentalClinicDB_MVP') IS NOT NULL
BEGIN
    ALTER DATABASE DentalClinicDB_MVP SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE DentalClinicDB_MVP;
END
GO

CREATE DATABASE DentalClinicDB_MVP;
GO
USE DentalClinicDB_MVP;
GO

-- ======================================================
-- 1Ô∏è‚É£ USER & ROLE MANAGEMENT
-- ======================================================
IF OBJECT_ID('dbo.Roles','U') IS NOT NULL DROP TABLE dbo.Roles;
IF OBJECT_ID('dbo.Users','U') IS NOT NULL DROP TABLE dbo.Users;
IF OBJECT_ID('dbo.Employees','U') IS NOT NULL DROP TABLE dbo.Employees;
GO

CREATE TABLE Roles (
    role_id   INT IDENTITY(1,1) PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL UNIQUE
);
GO

CREATE TABLE Users (
    user_id       INT IDENTITY(1,1) PRIMARY KEY,
    username      VARCHAR(100) NOT NULL UNIQUE,
    email         VARCHAR(200) NOT NULL UNIQUE,
    password_hash VARCHAR(500) NULL,
    full_name     NVARCHAR(200) NULL,
    phone         VARCHAR(50)  NULL,
    role_id       INT NOT NULL,
    is_active     BIT NOT NULL DEFAULT 1,
    created_at    DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_Users_Roles FOREIGN KEY (role_id) REFERENCES Roles(role_id)
);
GO

CREATE TABLE Employees (
    employee_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id     INT NOT NULL,
    position    VARCHAR(100),
    hire_date   DATE NULL,
    CONSTRAINT FK_Employees_Users FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
GO

-- ======================================================
-- 2Ô∏è‚É£ PATIENT MANAGEMENT
-- ======================================================
IF OBJECT_ID('dbo.PatientFiles','U') IS NOT NULL DROP TABLE dbo.PatientFiles;
IF OBJECT_ID('dbo.Patients','U') IS NOT NULL DROP TABLE dbo.Patients;
GO

CREATE TABLE Patients (
    patient_id  INT IDENTITY(1,1) PRIMARY KEY,
    full_name   NVARCHAR(200) NOT NULL,
    birth_date  DATE NULL,
    gender      CHAR(1) NULL CHECK (gender IN ('M','F','O')),
    phone       VARCHAR(50) NULL,
    email       VARCHAR(150) NULL,
    address     NVARCHAR(300) NULL,
    avatar      VARCHAR(500) NULL,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME()
);
GO

CREATE TABLE PatientFiles (
    file_id     INT IDENTITY(1,1) PRIMARY KEY,
    patient_id  INT NOT NULL,
    content     VARCHAR(MAX) NULL,
    uploaded_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_PatientFiles_Patients FOREIGN KEY (patient_id) REFERENCES Patients(patient_id)
);
GO

-- ======================================================
-- 3Ô∏è‚É£ APPOINTMENT & QUEUE
-- ======================================================
IF OBJECT_ID('dbo.WaitingQueue','U') IS NOT NULL DROP TABLE dbo.WaitingQueue;
IF OBJECT_ID('dbo.AppointmentRequests','U') IS NOT NULL DROP TABLE dbo.AppointmentRequests;
IF OBJECT_ID('dbo.Appointments','U') IS NOT NULL DROP TABLE dbo.Appointments;
IF OBJECT_ID('dbo.Services','U') IS NOT NULL DROP TABLE dbo.Services;
GO

CREATE TABLE Services (
    service_id        INT IDENTITY(1,1) PRIMARY KEY,
    name              VARCHAR(150) NOT NULL UNIQUE,
    description       NVARCHAR(500) NULL,
    price             DECIMAL(18,2) NOT NULL CHECK (price >= 0),
    duration_minutes  INT NULL CHECK (duration_minutes > 0),
    is_active         BIT NOT NULL DEFAULT 1
);
GO

CREATE TABLE AppointmentRequests (
    request_id           INT IDENTITY(1,1) PRIMARY KEY,
    patient_id           INT NULL,
    full_name            NVARCHAR(200) NOT NULL,
    phone                VARCHAR(50) NOT NULL,
    email                VARCHAR(150) NULL,
    service_id           INT NULL,
    preferred_doctor_id   INT NULL,
    preferred_date       DATE NULL,
    preferred_shift      VARCHAR(20) NULL CHECK (preferred_shift IN ('Morning','Afternoon','FullDay')),
    notes                NVARCHAR(500) NULL,
    status               VARCHAR(20) NOT NULL DEFAULT 'PENDING' CHECK (status IN ('PENDING','CONFIRMED','REJECTED')),
    otp_code             VARCHAR(10) NULL,
    otp_expires_at       DATETIME2 NULL,
    created_at           DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    confirmed_at         DATETIME2 NULL,
    CONSTRAINT FK_AppointmentRequests_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_AppointmentRequests_Service FOREIGN KEY (service_id) REFERENCES Services(service_id),
    CONSTRAINT FK_AppointmentRequests_Doctor FOREIGN KEY (preferred_doctor_id) REFERENCES Users(user_id)
);
GO

CREATE TABLE Appointments (
    appointment_id    INT IDENTITY(1,1) PRIMARY KEY,
    patient_id        INT NOT NULL,
    dentist_id        INT NOT NULL,
    service_id        INT NOT NULL,
    appointment_date  DATETIME2 NOT NULL,
    status            VARCHAR(50) NOT NULL DEFAULT 'SCHEDULED' CHECK (status IN ('SCHEDULED','CONFIRMED','WAITING','COMPLETED','CANCELLED')),
    notes             NVARCHAR(500) NULL,
    created_at        DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    source            VARCHAR(20) NOT NULL DEFAULT 'INTERNAL' CHECK (source IN ('INTERNAL','ONLINE')),
    booking_channel   VARCHAR(20) NULL CHECK (booking_channel IN ('WEB','MOBILE','KIOSK')),
    created_by_patient_id INT NULL,
    created_by_user_id    INT NULL,
    confirmation_code VARCHAR(10) NULL,
    confirmed_at      DATETIME2 NULL,
    CONSTRAINT FK_Appointments_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_Appointments_Dentist FOREIGN KEY (dentist_id) REFERENCES Users(user_id),
    CONSTRAINT FK_Appointments_Service FOREIGN KEY (service_id) REFERENCES Services(service_id),
    CONSTRAINT FK_Appointments_CreatedByPatient FOREIGN KEY (created_by_patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_Appointments_CreatedByUser FOREIGN KEY (created_by_user_id) REFERENCES Users(user_id)
);
GO

CREATE TABLE WaitingQueue (
    queue_id          INT IDENTITY(1,1) PRIMARY KEY,
    appointment_id    INT NOT NULL UNIQUE,
    position_in_queue INT NULL,
    status            VARCHAR(50) NOT NULL DEFAULT 'WAITING' CHECK (status IN ('WAITING','CHECKED_IN','CALLED','IN_TREATMENT','COMPLETED','NO_SHOW')),
    CONSTRAINT FK_WaitingQueue_Appointments FOREIGN KEY (appointment_id) REFERENCES Appointments(appointment_id)
);
GO

-- ======================================================
-- 4Ô∏è‚É£ MEDICAL RECORDS & TREATMENT
-- ======================================================
IF OBJECT_ID('dbo.PrescriptionItems','U') IS NOT NULL DROP TABLE dbo.PrescriptionItems;
IF OBJECT_ID('dbo.Prescriptions','U') IS NOT NULL DROP TABLE dbo.Prescriptions;
IF OBJECT_ID('dbo.TreatmentSessions','U') IS NOT NULL DROP TABLE dbo.TreatmentSessions;
IF OBJECT_ID('dbo.TreatmentPlans','U') IS NOT NULL DROP TABLE dbo.TreatmentPlans;
IF OBJECT_ID('dbo.Examinations','U') IS NOT NULL DROP TABLE dbo.Examinations;
IF OBJECT_ID('dbo.MedicalRecords','U') IS NOT NULL DROP TABLE dbo.MedicalRecords;
GO

CREATE TABLE MedicalRecords (
    record_id   INT IDENTITY(1,1) PRIMARY KEY,
    patient_id  INT NOT NULL,
    dentist_id  INT NULL,
    summary     NVARCHAR(MAX) NULL,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_MedicalRecords_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_MedicalRecords_Dentist FOREIGN KEY (dentist_id) REFERENCES Users(user_id)
);
GO

CREATE TABLE Examinations (
    exam_id     INT IDENTITY(1,1) PRIMARY KEY,
    record_id   INT NOT NULL,
    findings    NVARCHAR(MAX) NULL,
    diagnosis   NVARCHAR(MAX) NULL,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_Examinations_Record FOREIGN KEY (record_id) REFERENCES MedicalRecords(record_id)
);
GO

CREATE TABLE TreatmentPlans (
    plan_id         INT IDENTITY(1,1) PRIMARY KEY,
    record_id       INT NOT NULL,
    plan_summary    NVARCHAR(MAX) NULL,
    notes           NVARCHAR(500) NULL,
    estimated_cost  DECIMAL(18,2) NULL CHECK (estimated_cost >= 0),
    created_at      DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_TreatmentPlans_Record FOREIGN KEY (record_id) REFERENCES MedicalRecords(record_id)
);
GO

CREATE TABLE TreatmentSessions (
    session_id      INT IDENTITY(1,1) PRIMARY KEY,
    plan_id         INT NOT NULL,
    session_date    DATETIME2 NOT NULL,
    procedure_done  NVARCHAR(500) NULL,
    session_cost    DECIMAL(18,2) NULL CHECK (session_cost >= 0),
    CONSTRAINT FK_TreatmentSessions_Plan FOREIGN KEY (plan_id) REFERENCES TreatmentPlans(plan_id)
);
GO

CREATE TABLE Prescriptions (
    prescription_id INT IDENTITY(1,1) PRIMARY KEY,
    patient_id      INT NOT NULL,
    dentist_id      INT NULL,
    created_at      DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    notes           NVARCHAR(500) NULL,
    CONSTRAINT FK_Prescriptions_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_Prescriptions_Dentist FOREIGN KEY (dentist_id) REFERENCES Users(user_id)
);
GO

CREATE TABLE PrescriptionItems (
    item_id         INT IDENTITY(1,1) PRIMARY KEY,
    prescription_id INT NOT NULL,
    medication_name NVARCHAR(200) NOT NULL,
    dosage          VARCHAR(100) NULL,
    duration        VARCHAR(100) NULL,
    instructions    NVARCHAR(300) NULL,
    CONSTRAINT FK_PrescriptionItems_Prescriptions FOREIGN KEY (prescription_id) REFERENCES Prescriptions(prescription_id)
);
GO

-- ======================================================
-- 5Ô∏è‚É£ INVENTORY MANAGEMENT
-- ======================================================
IF OBJECT_ID('dbo.StockTransactions','U') IS NOT NULL DROP TABLE dbo.StockTransactions;
IF OBJECT_ID('dbo.InventoryItems','U') IS NOT NULL DROP TABLE dbo.InventoryItems;
GO

CREATE TABLE InventoryItems (
    item_id     INT IDENTITY(1,1) PRIMARY KEY,
    name        NVARCHAR(200) NOT NULL UNIQUE,
    unit        VARCHAR(50) NULL,
    quantity    INT NOT NULL DEFAULT 0 CHECK (quantity >= 0),
    min_stock   INT NOT NULL DEFAULT 0 CHECK (min_stock >= 0),
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME()
);
GO

CREATE TABLE StockTransactions (
    transaction_id   INT IDENTITY(1,1) PRIMARY KEY,
    item_id          INT NOT NULL,
    transaction_type VARCHAR(20) NOT NULL CHECK (transaction_type IN ('IN','OUT')),
    quantity         INT NOT NULL CHECK (quantity > 0),
    performed_by     INT NULL,
    performed_at     DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    notes            NVARCHAR(500) NULL,
    CONSTRAINT FK_StockTransactions_Item FOREIGN KEY (item_id) REFERENCES InventoryItems(item_id),
    CONSTRAINT FK_StockTransactions_User FOREIGN KEY (performed_by) REFERENCES Users(user_id)
);
GO

-- ======================================================
-- 6Ô∏è‚É£ BILLING & PAYMENT
-- ======================================================
IF OBJECT_ID('dbo.Payments','U') IS NOT NULL DROP TABLE dbo.Payments;
IF OBJECT_ID('dbo.InvoiceItems','U') IS NOT NULL DROP TABLE dbo.InvoiceItems;
IF OBJECT_ID('dbo.Invoices','U') IS NOT NULL DROP TABLE dbo.Invoices;
GO

CREATE TABLE Invoices (
    invoice_id     INT IDENTITY(1,1) PRIMARY KEY,
    patient_id     INT NOT NULL,
    appointment_id INT NULL,
    total_amount   DECIMAL(18,2) NOT NULL DEFAULT 0,
    discount_amount DECIMAL(18,2) NOT NULL DEFAULT 0,
    net_amount     AS (total_amount - discount_amount),
    status         VARCHAR(50) NOT NULL DEFAULT 'UNPAID',
    created_at     DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_Invoices_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_Invoices_Appointment FOREIGN KEY (appointment_id) REFERENCES Appointments(appointment_id)
);
GO

CREATE TABLE InvoiceItems (
    item_id     INT IDENTITY(1,1) PRIMARY KEY,
    invoice_id  INT NOT NULL,
    service_id  INT NULL,
    quantity    INT NOT NULL DEFAULT 1,
    unit_price  DECIMAL(18,2) NOT NULL,
    total_price AS (quantity * unit_price),
    CONSTRAINT FK_InvoiceItems_Invoice FOREIGN KEY (invoice_id) REFERENCES Invoices(invoice_id),
    CONSTRAINT FK_InvoiceItems_Service FOREIGN KEY (service_id) REFERENCES Services(service_id)
);
GO

CREATE TABLE Payments (
    payment_id  INT IDENTITY(1,1) PRIMARY KEY,
    invoice_id  INT NOT NULL,
    amount      DECIMAL(18,2) NOT NULL,
    method      VARCHAR(50) NOT NULL DEFAULT 'CASH',
    paid_at     DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_Payments_Invoice FOREIGN KEY (invoice_id) REFERENCES Invoices(invoice_id)
);
GO

-- ======================================================
-- 7Ô∏è‚É£ ADDITIONAL MODULES (NEW)
-- ======================================================
-- ScheduleRequests
IF OBJECT_ID('dbo.ScheduleRequests','U') IS NOT NULL DROP TABLE dbo.ScheduleRequests;
GO
CREATE TABLE ScheduleRequests (
    request_id   INT IDENTITY(1,1) PRIMARY KEY,
    employee_id  INT NOT NULL,
    date         DATE NOT NULL,
    shift        VARCHAR(50) NOT NULL CHECK (shift IN ('Morning','Afternoon','FullDay')),
    reason       NVARCHAR(500) NULL,
    status       VARCHAR(20) NOT NULL DEFAULT 'PENDING' CHECK (status IN ('PENDING','APPROVED','REJECTED')),
    created_at   DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    reviewed_by  INT NULL,
    reviewed_at  DATETIME2 NULL,
    CONSTRAINT FK_ScheduleRequests_Employee FOREIGN KEY (employee_id) REFERENCES Employees(employee_id),
    CONSTRAINT FK_ScheduleRequests_Reviewer FOREIGN KEY (reviewed_by) REFERENCES Users(user_id)
);
GO

CREATE TABLE DoctorSchedules (
    schedule_id INT IDENTITY(1,1) PRIMARY KEY,
    doctor_id   INT NOT NULL,
    work_date   DATE NOT NULL,
    shift       NVARCHAR(50) NOT NULL,
    start_time  TIME(7) NULL,
    end_time    TIME(7) NULL,
    room_no     VARCHAR(50) NULL,
    status      VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_DoctorSchedules_Doctor FOREIGN KEY (doctor_id) REFERENCES Users(user_id)
);

-- SystemConfigs
IF OBJECT_ID('dbo.SystemConfigs','U') IS NOT NULL DROP TABLE dbo.SystemConfigs;
GO
CREATE TABLE SystemConfigs (
    config_id    INT IDENTITY(1,1) PRIMARY KEY,
    config_key   VARCHAR(100) NOT NULL UNIQUE,
    config_value NVARCHAR(MAX) NULL,
    updated_at   DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    updated_by   INT NULL,
    CONSTRAINT FK_SystemConfigs_UpdatedBy FOREIGN KEY (updated_by) REFERENCES Users(user_id)
);
GO

-- PatientImages
IF OBJECT_ID('dbo.PatientImages','U') IS NOT NULL DROP TABLE dbo.PatientImages;
GO
CREATE TABLE PatientImages (
    image_id     INT IDENTITY(1,1) PRIMARY KEY,
    patient_id   INT NOT NULL,
    record_id    INT NULL,
    file_path    NVARCHAR(500) NOT NULL,
    image_type   VARCHAR(50) NOT NULL DEFAULT 'OTHER' CHECK (image_type IN ('X-RAY','BEFORE','AFTER','OTHER')),
    uploaded_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    uploaded_by  INT NULL,
    CONSTRAINT FK_PatientImages_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_PatientImages_Record FOREIGN KEY (record_id) REFERENCES MedicalRecords(record_id),
    CONSTRAINT FK_PatientImages_Uploader FOREIGN KEY (uploaded_by) REFERENCES Users(user_id)
);
GO

-- ======================================================
-- 8Ô∏è‚É£ SEED DATA
-- ======================================================

INSERT INTO Roles (role_name)
VALUES ('Administrator'), ('ClinicManager'), ('Dentist'), ('Receptionist'), ('Patient');
GO

INSERT INTO Users (username, email, password_hash, full_name, phone, role_id)
VALUES
('admin','admin@clinic.com','1','System Admin','0900000000',1),
('dr.john','john@clinic.com','1','Dr. John Doe','0911111111',3),
('reception1','recp@clinic.com','1','Reception Staff','0922222222',4);
GO

INSERT INTO Employees (user_id, position, hire_date)
VALUES
(2, 'Senior Dentist', '2024-01-15'),
(3, 'Receptionist', '2024-02-01');
GO

-- Th√™m th√™m employees ƒë·ªÉ c√≥ th√™m d·ªØ li·ªáu m·∫´u
INSERT INTO Users (username, email, password_hash, full_name, phone, role_id)
VALUES
('dr.smith','smith@clinic.com','1','Dr. Smith Wilson','0933333333',3),
('dr.mary','mary@clinic.com','1','Dr. Mary Johnson','0944444444',3),
('manager1','manager@clinic.com','1','Manager Nguyen Van','0955555555',2);
GO

INSERT INTO Employees (user_id, position, hire_date)
VALUES
(4, 'Dentist', '2024-03-10'),
(5, 'Junior Dentist', '2024-05-01'),
(6, 'Clinic Manager', '2023-11-20');
GO

INSERT INTO InventoryItems(name, unit, quantity, min_stock)
VALUES
('Gloves (box)', 'box', 50, 10),
('Masks (box)',  'box', 40, 10),
('Mouthwash',    'bottle', 20, 5);
GO

INSERT INTO Services(name, description, price, duration_minutes, is_active) VALUES
('Oral Examination', 'General oral health check', 100000, 20, 1),
('Teeth Cleaning', 'Scaling and polishing',       300000, 40, 1),
('Filling',        'Composite filling',           500000, 45, 1),
('Root Canal',     'Endodontic treatment',       1500000, 90, 1);
GO

INSERT INTO SystemConfigs(config_key, config_value)
VALUES
('clinic_name', N'Nha khoa An T√¢m'),
('clinic_phone', '0901234567'),
('clinic_email', 'contact@antamclinic.com'),
('payment_methods', 'CASH,CARD,TRANSFER'),
('logo_url', '/assets/logo.png');
GO

-- Sample AppointmentRequests data
INSERT INTO AppointmentRequests (full_name, phone, email, service_id, preferred_doctor_id, preferred_date, preferred_shift, notes, status)
VALUES
(N'Nguy·ªÖn VƒÉn A', '0901234567', 'nguyenvana@email.com', 1, 2, '2025-10-22', 'Morning', 'C·∫ßn kh√°m rƒÉng s√¢u', 'PENDING'),
(N'Tr·∫ßn Th·ªã B', '0901234568', 'tranthib@email.com', 2, 2, '2025-10-23', 'Afternoon', 'L√†m s·∫°ch rƒÉng', 'PENDING'),
(N'L√™ VƒÉn C', '0901234569', 'levanc@email.com', 3, 2, '2025-10-24', 'Morning', 'Tr√°m rƒÉng', 'CONFIRMED');
GO

-- Sample DoctorSchedules data
INSERT INTO DoctorSchedules (doctor_id, work_date, shift, start_time, end_time, room_no, status)
VALUES
-- Dr. John Doe (doctor_id = 2) - L·ªãch tu·∫ßn n√†y
(2, '2025-10-20', 'Morning', '08:00:00', '12:00:00', 'Room 101', 'ACTIVE'),
(2, '2025-10-20', 'Afternoon', '13:00:00', '17:00:00', 'Room 101', 'ACTIVE'),
(2, '2025-10-21', 'Morning', '08:00:00', '12:00:00', 'Room 101', 'ACTIVE'),
(2, '2025-10-21', 'Afternoon', '13:00:00', '17:00:00', 'Room 101', 'ACTIVE'),
(2, '2025-10-22', 'Morning', '08:00:00', '12:00:00', 'Room 101', 'ACTIVE'),
(2, '2025-10-22', 'Afternoon', '13:00:00', '17:00:00', 'Room 101', 'ACTIVE'),
(2, '2025-10-23', 'Morning', '08:00:00', '12:00:00', 'Room 101', 'ACTIVE'),
(2, '2025-10-23', 'Afternoon', '13:00:00', '17:00:00', 'Room 101', 'ACTIVE'),
(2, '2025-10-24', 'Morning', '08:00:00', '12:00:00', 'Room 101', 'ACTIVE'),
(2, '2025-10-24', 'Afternoon', '13:00:00', '17:00:00', 'Room 101', 'ACTIVE'),
(2, '2025-10-25', 'Morning', '08:00:00', '12:00:00', 'Room 101', 'ACTIVE'),
(2, '2025-10-27', 'FullDay', '08:00:00', '17:00:00', 'Room 102', 'ACTIVE'),
(2, '2025-10-28', 'Morning', '08:00:00', '12:00:00', 'Room 101', 'ACTIVE'),
(2, '2025-10-28', 'Afternoon', '13:00:00', '17:00:00', 'Room 101', 'ACTIVE');
GO

-- Sample ScheduleRequests data
INSERT INTO ScheduleRequests (employee_id, date, shift, reason, status, reviewed_by, reviewed_at)
VALUES
-- Employee 1 (Dr. John Doe) - Requests ƒëang ch·ªù x·ª≠ l√Ω
(1, '2025-10-26', 'Morning', N'C·∫ßn ƒëi kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥', 'PENDING', NULL, NULL),
(1, '2025-10-29', 'Afternoon', N'Ngh·ªâ ph√©p ƒë·ªÉ vi·ªác gia ƒë√¨nh', 'PENDING', NULL, NULL),
-- Employee 1 - Requests ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n
(1, '2025-10-30', 'FullDay', N'Ngh·ªâ ph√©p nƒÉm', 'APPROVED', 1, '2025-10-19 10:30:00'),
(1, '2025-10-31', 'Morning', N'ƒêi h·ªçc n√¢ng cao chuy√™n m√¥n', 'APPROVED', 1, '2025-10-18 09:15:00'),
-- Employee 1 - Requests ƒë√£ b·ªã t·ª´ ch·ªëi
(1, '2025-10-21', 'FullDay', N'Ngh·ªâ ƒë·ªôt xu·∫•t', 'REJECTED', 1, '2025-10-20 14:00:00'),
-- Employee 2 (Receptionist) - Requests
(2, '2025-10-22', 'Afternoon', N'C·∫ßn ngh·ªâ ph√©p ƒë·ªÉ h·ªçp gia ƒë√¨nh', 'PENDING', NULL, NULL),
(2, '2025-10-25', 'Morning', N'ƒêi kh√°m b·ªánh', 'PENDING', NULL, NULL),
(2, '2025-10-27', 'FullDay', N'Ngh·ªâ ph√©p k·∫øt h√¥n', 'APPROVED', 1, '2025-10-15 11:00:00'),
(2, '2025-10-28', 'Afternoon', N'L√Ω do c√° nh√¢n', 'REJECTED', 1, '2025-10-17 16:20:00');
GO

-- Sample Patients data
INSERT INTO Patients (full_name, birth_date, gender, phone, email, address)
VALUES
(N'Nguy·ªÖn VƒÉn An', '1990-05-15', 'M', '0901111111', 'nguyenvanan@email.com', N'123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM'),
(N'Tr·∫ßn Th·ªã B√¨nh', '1985-08-22', 'F', '0902222222', 'tranthibinh@email.com', N'456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 2, TP.HCM'),
(N'L√™ VƒÉn C∆∞·ªùng', '1995-12-10', 'M', '0903333333', 'levancuong@email.com', N'789 ƒê∆∞·ªùng DEF, Qu·∫≠n 3, TP.HCM'),
(N'Ph·∫°m Th·ªã Dung', '1988-03-05', 'F', '0904444444', 'phamthidung@email.com', N'101 ƒê∆∞·ªùng GHI, Qu·∫≠n 4, TP.HCM'),
(N'Ho√†ng VƒÉn Em', '1992-07-18', 'M', '0905555555', 'hoangvanem@email.com', N'202 ƒê∆∞·ªùng JKL, Qu·∫≠n 5, TP.HCM');
GO

-- Sample PatientFiles data
INSERT INTO PatientFiles (patient_id, content, uploaded_at)
VALUES
(1, N'H·ªì s∆° ƒëi·ªÅu tr·ªã rƒÉng c·ª≠a 2024', '2024-06-15 10:00:00'),
(1, N'Phim X-quang rƒÉng h√†m', '2024-07-20 14:30:00'),
(2, N'H·ªì s∆° kh√°m ƒë·ªãnh k·ª≥', '2024-08-10 09:15:00'),
(3, N'H·ªì s∆° ch·ªØa t·ªßy rƒÉng', '2024-09-05 11:45:00');
GO

-- Sample Appointments data
INSERT INTO Appointments (patient_id, dentist_id, service_id, appointment_date, status, notes, source, created_by_patient_id, confirmation_code)
VALUES
(1, 2, 1, '2025-10-22 09:00:00', 'CONFIRMED', N'Kh√°m rƒÉng s√¢u', 'INTERNAL', NULL, 'CONF001'),
(2, 2, 2, '2025-10-23 14:00:00', 'SCHEDULED', N'L√†m s·∫°ch rƒÉng', 'INTERNAL', NULL, 'CONF002'),
(3, 4, 3, '2025-10-24 10:30:00', 'CONFIRMED', N'Tr√°m rƒÉng', 'INTERNAL', NULL, 'CONF003'),
(4, 2, 1, '2025-10-25 08:00:00', 'SCHEDULED', N'Kh√°m t·ªïng qu√°t', 'INTERNAL', NULL, 'CONF004'),
(5, 2, 4, '2025-10-26 13:00:00', 'SCHEDULED', N'ƒêi·ªÅu tr·ªã t·ªßy rƒÉng', 'INTERNAL', NULL, NULL);
GO

-- Sample WaitingQueue data (ch·ªâ cho c√°c appointments ƒë√£ confirmed)
-- Gi·∫£ s·ª≠ appointments ƒë∆∞·ª£c insert th√†nh c√¥ng v·ªõi IDENTITY b·∫Øt ƒë·∫ßu t·ª´ 1
INSERT INTO WaitingQueue (appointment_id, position_in_queue, status)
VALUES
(1, 1, 'WAITING'),
(3, 2, 'WAITING');
GO

-- Sample MedicalRecords data
INSERT INTO MedicalRecords (patient_id, dentist_id, summary, created_at)
VALUES
(1, 2, N'B·ªánh nh√¢n c√≥ rƒÉng s√¢u ·ªü rƒÉng s·ªë 16, c·∫ßn ƒëi·ªÅu tr·ªã', '2024-06-15 10:30:00'),
(2, 2, N'B·ªánh nh√¢n c·∫ßn v·ªá sinh rƒÉng mi·ªáng ƒë·ªãnh k·ª≥', '2024-08-10 09:45:00'),
(3, 4, N'B·ªánh nh√¢n c·∫ßn tr√°m rƒÉng s·ªë 35', '2024-09-05 12:00:00'),
(4, 2, N'B·ªánh nh√¢n kh√°m s·ª©c kh·ªèe rƒÉng mi·ªáng t·ªïng qu√°t', '2024-10-01 08:15:00'),
(5, 2, N'B·ªánh nh√¢n c√≥ v·∫•n ƒë·ªÅ v·ªÅ t·ªßy rƒÉng s·ªë 36', '2024-10-10 13:20:00');
GO

-- Sample Examinations data
INSERT INTO Examinations (record_id, findings, diagnosis, created_at)
VALUES
(1, N'Ph√°t hi·ªán rƒÉng s√¢u ·ªü rƒÉng s·ªë 16, c√≥ l·ªó s√¢u v·ª´a', N'S√¢u rƒÉng m·ª©c ƒë·ªô 2, c·∫ßn tr√°m rƒÉng', '2024-06-15 10:35:00'),
(2, N'RƒÉng c√≥ nhi·ªÅu m·∫£ng b√°m, c·∫ßn v·ªá sinh s·∫°ch s·∫Ω', N'V·ªá sinh rƒÉng mi·ªáng, kh√¥ng ph√°t hi·ªán b·∫•t th∆∞·ªùng', '2024-08-10 09:50:00'),
(3, N'RƒÉng s·ªë 35 c√≥ l·ªó s√¢u l·ªõn, c·∫ßn tr√°m composite', N'S√¢u rƒÉng m·ª©c ƒë·ªô 3, c·∫ßn tr√°m ngay', '2024-09-05 12:05:00'),
(4, N'RƒÉng mi·ªáng kh·ªèe m·∫°nh, ch·ªâ c·∫ßn theo d√µi', N'Kh√¥ng ph√°t hi·ªán v·∫•n ƒë·ªÅ', '2024-10-01 08:25:00'),
(5, N'T·ªßy rƒÉng s·ªë 36 b·ªã vi√™m, c·∫ßn ƒëi·ªÅu tr·ªã n·ªôi nha', N'Vi√™m t·ªßy rƒÉng, c·∫ßn ƒëi·ªÅu tr·ªã t·ªßy', '2024-10-10 13:30:00');
GO

-- Sample TreatmentPlans data
INSERT INTO TreatmentPlans (record_id, plan_summary, estimated_cost, created_at)
VALUES
(1, N'Tr√°m rƒÉng composite cho rƒÉng s·ªë 16', 500000, '2024-06-15 10:40:00'),
(2, N'V·ªá sinh rƒÉng mi·ªáng h√†ng nƒÉm', 300000, '2024-08-10 09:55:00'),
(3, N'Tr√°m rƒÉng composite cho rƒÉng s·ªë 35', 500000, '2024-09-05 12:10:00'),
(4, N'Theo d√µi s·ª©c kh·ªèe rƒÉng mi·ªáng', 100000, '2024-10-01 08:30:00'),
(5, N'ƒêi·ªÅu tr·ªã t·ªßy rƒÉng s·ªë 36, sau ƒë√≥ tr√°m ho·∫∑c b·ªçc', 2000000, '2024-10-10 13:40:00');
GO

-- Sample TreatmentSessions data
INSERT INTO TreatmentSessions (plan_id, session_date, procedure_done, session_cost)
VALUES
(1, '2024-06-20 10:00:00', N'ƒê√£ ho√†n th√†nh tr√°m rƒÉng s·ªë 16', 500000),
(2, '2024-08-10 10:30:00', N'ƒê√£ v·ªá sinh rƒÉng mi·ªáng', 300000),
(3, '2024-09-10 14:00:00', N'ƒê√£ ho√†n th√†nh tr√°m rƒÉng s·ªë 35', 500000),
(4, '2024-10-01 08:30:00', N'ƒê√£ kh√°m v√† theo d√µi', 100000);
GO

-- Sample Prescriptions data
INSERT INTO Prescriptions (patient_id, dentist_id, notes, created_at)
VALUES
(1, 2, N'U·ªëng thu·ªëc gi·∫£m ƒëau sau khi tr√°m', '2024-06-20 10:30:00'),
(3, 4, N'S·ª≠ d·ª•ng thu·ªëc kh√°ng sinh sau khi tr√°m', '2024-09-10 14:30:00'),
(5, 2, N'U·ªëng thu·ªëc gi·∫£m ƒëau v√† kh√°ng vi√™m', '2024-10-10 13:50:00');
GO

-- Sample PrescriptionItems data
INSERT INTO PrescriptionItems (prescription_id, medication_name, dosage, duration, instructions)
VALUES
(1, N'Paracetamol 500mg', N'2 vi√™n/l·∫ßn', N'3 ng√†y', N'U·ªëng sau khi ƒëau'),
(1, N'Ibuprofen 400mg', N'1 vi√™n/l·∫ßn', N'3 ng√†y', N'U·ªëng sau ƒÉn'),
(2, N'Amoxicillin 500mg', N'1 vi√™n/l·∫ßn, 3 l·∫ßn/ng√†y', N'7 ng√†y', N'U·ªëng ƒë·ªÅu ƒë·∫∑n sau ƒÉn'),
(2, N'Metronidazole 250mg', N'1 vi√™n/l·∫ßn, 2 l·∫ßn/ng√†y', N'7 ng√†y', N'U·ªëng ƒë·ªÅu ƒë·∫∑n'),
(3, N'Ketoprofen 100mg', N'1 vi√™n/l·∫ßn', N'5 ng√†y', N'U·ªëng sau ƒÉn ƒë·ªÉ tr√°nh ƒëau d·∫° d√†y'),
(3, N'Cefuroxime 250mg', N'1 vi√™n/l·∫ßn, 2 l·∫ßn/ng√†y', N'5 ng√†y', N'U·ªëng ƒë·ªÅu ƒë·∫∑n');
GO

-- Sample StockTransactions data
INSERT INTO StockTransactions (item_id, transaction_type, quantity, performed_by, performed_at, notes)
VALUES
-- Nh·∫≠p kho
(1, 'IN', 20, 1, '2024-10-01 08:00:00', N'Nh·∫≠p th√™m bao tay'),
(2, 'IN', 15, 3, '2024-10-02 09:00:00', N'Nh·∫≠p th√™m kh·∫©u trang'),
(3, 'IN', 10, 3, '2024-10-03 10:00:00', N'Nh·∫≠p th√™m n∆∞·ªõc s√∫c mi·ªáng'),
-- Xu·∫•t kho
(1, 'OUT', 5, 1, '2024-10-05 14:00:00', N'Xu·∫•t cho ph√≤ng kh√°m'),
(2, 'OUT', 3, 1, '2024-10-06 15:00:00', N'Xu·∫•t cho ph√≤ng kh√°m'),
(1, 'OUT', 2, 1, '2024-10-08 16:00:00', N'Xu·∫•t cho ph√≤ng kh√°m');
GO

-- Sample Invoices data
INSERT INTO Invoices (patient_id, appointment_id, total_amount, discount_amount, status, created_at)
VALUES
(1, 1, 500000, 0, 'PAID', '2024-06-20 10:45:00'),
(2, 2, 300000, 50000, 'UNPAID', '2024-08-10 11:00:00'),
(3, 3, 500000, 0, 'PAID', '2024-09-10 14:45:00'),
(4, 4, 100000, 0, 'PARTIAL', '2024-10-01 09:00:00'),
(5, 5, 2000000, 200000, 'UNPAID', '2024-10-10 14:00:00');
GO

-- Sample InvoiceItems data
INSERT INTO InvoiceItems (invoice_id, service_id, quantity, unit_price)
VALUES
-- Invoice 1 (Patient 1)
(1, 3, 1, 500000),
-- Invoice 2 (Patient 2)
(2, 2, 1, 300000),
-- Invoice 3 (Patient 3)
(3, 3, 1, 500000),
-- Invoice 4 (Patient 4)
(4, 1, 1, 100000),
-- Invoice 5 (Patient 5)
(5, 4, 1, 2000000);
GO

-- Sample Payments data
INSERT INTO Payments (invoice_id, amount, method, paid_at)
VALUES
(1, 500000, 'CASH', '2024-06-20 10:50:00'),
(3, 500000, 'CARD', '2024-09-10 14:50:00'),
(4, 50000, 'CASH', '2024-10-01 09:15:00');
GO

-- Sample PatientImages data
INSERT INTO PatientImages (patient_id, record_id, file_path, image_type, uploaded_at, uploaded_by)
VALUES
(1, 1, '/uploads/medical-images/xray-001.png', 'X-RAY', '2024-06-15 10:40:00', 2),
(2, 2, '/uploads/medical-images/photo-001.png', 'BEFORE', '2024-08-10 09:55:00', 2),
(3, 3, '/uploads/medical-images/xray-002.png', 'X-RAY', '2024-09-05 12:10:00', 4),
(3, 3, '/uploads/medical-images/photo-002.png', 'AFTER', '2024-09-10 14:50:00', 4),
(5, 5, '/uploads/medical-images/xray-003.png', 'X-RAY', '2024-10-10 13:50:00', 2);
GO

PRINT '‚úÖ DentalClinicDB_MVP full schema (no trigger) created successfully.';