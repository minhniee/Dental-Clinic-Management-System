-- ===================================================================
-- 🦷 Dental Clinic Management System (MVP Version) - FIXED & CLEANED
-- SQL Server Script - Minimal schema + Online Booking + Schedules
-- ===================================================================

IF DB_ID('DentalClinicDB_MVP') IS NULL
BEGIN
    CREATE DATABASE DentalClinicDB_MVP;
END
GO
USE DentalClinicDB_MVP;
GO

-- ======================================================
-- 1️⃣ USER & ROLE MANAGEMENT
-- ======================================================
IF OBJECT_ID('dbo.Roles','U') IS NOT NULL DROP TABLE dbo.Roles;
IF OBJECT_ID('dbo.Users','U') IS NOT NULL DROP TABLE dbo.Users;
IF OBJECT_ID('dbo.Employees','U') IS NOT NULL DROP TABLE dbo.Employees;
GO

CREATE TABLE Roles (
    role_id   INT IDENTITY(1,1) PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL UNIQUE
);
GO

CREATE TABLE Users (
    user_id     INT IDENTITY(1,1) PRIMARY KEY,
    username    VARCHAR(100) NOT NULL UNIQUE,
    email       VARCHAR(200) NOT NULL UNIQUE,
    password_hash VARCHAR(500) NULL,
    full_name   VARCHAR(200) NULL,
    phone       VARCHAR(50)  NULL,
    role_id     INT NOT NULL,
    is_active   BIT NOT NULL DEFAULT 1,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_Users_Roles FOREIGN KEY (role_id) REFERENCES Roles(role_id)
);
GO

CREATE TABLE Employees (
    employee_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id     INT NOT NULL,
    position    VARCHAR(100),
    hire_date   DATE NULL,
    CONSTRAINT FK_Employees_Users FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
GO

-- ======================================================
-- 2️⃣ PATIENT MANAGEMENT
-- ======================================================
IF OBJECT_ID('dbo.PatientFiles','U') IS NOT NULL DROP TABLE dbo.PatientFiles;
IF OBJECT_ID('dbo.Patients','U')     IS NOT NULL DROP TABLE dbo.Patients;
GO

CREATE TABLE Patients (
    patient_id  INT IDENTITY(1,1) PRIMARY KEY,
    full_name   VARCHAR(200) NOT NULL,
    birth_date  DATE NULL,
    gender      CHAR(1) NULL,                    -- M/F/O
    phone       VARCHAR(50) NULL,
    email       VARCHAR(150) NULL,
    address     VARCHAR(300) NULL,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    user_id     INT NULL UNIQUE,
    CONSTRAINT FK_Patients_Users FOREIGN KEY (user_id) REFERENCES Users(user_id),
    CONSTRAINT CK_Patients_Gender CHECK (gender IS NULL OR gender IN ('M','F','O'))
);
GO

CREATE TABLE PatientFiles (
    file_id     INT IDENTITY(1,1) PRIMARY KEY,
    patient_id  INT NOT NULL,
    content     VARCHAR(MAX) NULL,
    uploaded_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_PatientFiles_Patients FOREIGN KEY (patient_id) REFERENCES Patients(patient_id)
);
GO

-- ======================================================
-- 3️⃣ APPOINTMENT & QUEUE
-- ======================================================
IF OBJECT_ID('dbo.WaitingQueue','U')   IS NOT NULL DROP TABLE dbo.WaitingQueue;
IF OBJECT_ID('dbo.Appointments','U')   IS NOT NULL DROP TABLE dbo.Appointments;
IF OBJECT_ID('dbo.Services','U')       IS NOT NULL DROP TABLE dbo.Services;
GO

CREATE TABLE Services (
    service_id        INT IDENTITY(1,1) PRIMARY KEY,
    name              VARCHAR(150) NOT NULL,
    description       NVARCHAR(500) NULL,
    price             DECIMAL(18,2) NOT NULL,
    duration_minutes  INT NULL,
    is_active         BIT NOT NULL DEFAULT 1,
    CONSTRAINT CK_Services_Price CHECK (price >= 0),
    CONSTRAINT CK_Services_Duration CHECK (duration_minutes IS NULL OR duration_minutes > 0)
);
GO
CREATE UNIQUE INDEX UX_Services_Name ON Services(name);
GO

CREATE TABLE Appointments (
    appointment_id    INT IDENTITY(1,1) PRIMARY KEY,
    patient_id        INT NOT NULL,
    dentist_id        INT  NOT NULL,
    service_id        INT  NOT NULL,
    appointment_date  DATETIME2 NOT NULL,
    status            VARCHAR(50) NOT NULL DEFAULT 'SCHEDULED',
    notes             NVARCHAR(500) NULL,
    created_at        DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),

    -- 🔹 NEW FIXED COLUMN
    source            VARCHAR(20) NOT NULL DEFAULT 'INTERNAL',   -- INTERNAL / ONLINE

    booking_channel   VARCHAR(20) NULL,                          -- WEB / MOBILE / KIOSK
    created_by_patient_id INT NULL,
    created_by_user_id    INT NULL,
    confirmation_code VARCHAR(10) NULL,
    confirmed_at      DATETIME2 NULL,

    CONSTRAINT FK_Appointments_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_Appointments_Dentist FOREIGN KEY (dentist_id) REFERENCES Users(user_id),
    CONSTRAINT FK_Appointments_Service FOREIGN KEY (service_id) REFERENCES Services(service_id),
    CONSTRAINT FK_Appointments_CreatedByPatient FOREIGN KEY (created_by_patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_Appointments_CreatedByUser FOREIGN KEY (created_by_user_id) REFERENCES Users(user_id),
    CONSTRAINT CK_Appointments_Status CHECK (status IN ('SCHEDULED','CONFIRMED','COMPLETED','CANCELLED')),
    CONSTRAINT CK_Appointments_Source CHECK (source IN ('INTERNAL','ONLINE')),
    CONSTRAINT CK_Appointments_BookingChannel CHECK (booking_channel IS NULL OR booking_channel IN ('WEB','MOBILE','KIOSK'))
);
GO

CREATE INDEX IX_Appointments_PatientDate ON Appointments(patient_id, appointment_date);
CREATE INDEX IX_Appointments_DentistDate ON Appointments(dentist_id, appointment_date);
GO

CREATE TABLE WaitingQueue (
    queue_id          INT IDENTITY(1,1) PRIMARY KEY,
    appointment_id    INT NOT NULL UNIQUE,
    position_in_queue INT NULL,
    status            VARCHAR(50) NOT NULL DEFAULT 'WAITING', -- WAITING / CALLED / DONE
    CONSTRAINT FK_WaitingQueue_Appointments FOREIGN KEY (appointment_id) REFERENCES Appointments(appointment_id),
    CONSTRAINT CK_WaitingQueue_Status CHECK (status IN ('WAITING','CALLED','DONE'))
);
GO

-- ======================================================
-- 4️⃣ MEDICAL RECORDS & TREATMENT
-- ======================================================
IF OBJECT_ID('dbo.PrescriptionItems','U') IS NOT NULL DROP TABLE dbo.PrescriptionItems;
IF OBJECT_ID('dbo.Prescriptions','U')     IS NOT NULL DROP TABLE dbo.Prescriptions;
IF OBJECT_ID('dbo.TreatmentSessions','U') IS NOT NULL DROP TABLE dbo.TreatmentSessions;
IF OBJECT_ID('dbo.TreatmentPlans','U')    IS NOT NULL DROP TABLE dbo.TreatmentPlans;
IF OBJECT_ID('dbo.Examinations','U')      IS NOT NULL DROP TABLE dbo.Examinations;
IF OBJECT_ID('dbo.MedicalRecords','U')    IS NOT NULL DROP TABLE dbo.MedicalRecords;
GO

CREATE TABLE MedicalRecords (
    record_id   INT IDENTITY(1,1) PRIMARY KEY,
    patient_id  INT NOT NULL,
    dentist_id  INT NULL,
    summary     NVARCHAR(MAX) NULL,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_MedicalRecords_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_MedicalRecords_Dentist FOREIGN KEY (dentist_id) REFERENCES Users(user_id)
);
GO

CREATE TABLE Examinations (
    exam_id     INT IDENTITY(1,1) PRIMARY KEY,
    record_id   INT NOT NULL,
    findings    NVARCHAR(MAX) NULL,
    diagnosis   NVARCHAR(MAX) NULL,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_Examinations_Record FOREIGN KEY (record_id) REFERENCES MedicalRecords(record_id)
);
GO

CREATE TABLE TreatmentPlans (
    plan_id         INT IDENTITY(1,1) PRIMARY KEY,
    record_id       INT NOT NULL,
    plan_summary    NVARCHAR(MAX) NULL,
    estimated_cost  DECIMAL(18,2) NULL,
    created_at      DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_TreatmentPlans_Record FOREIGN KEY (record_id) REFERENCES MedicalRecords(record_id),
    CONSTRAINT CK_TreatmentPlans_Cost CHECK (estimated_cost IS NULL OR estimated_cost >= 0)
);
GO

CREATE TABLE TreatmentSessions (
    session_id      INT IDENTITY(1,1) PRIMARY KEY,
    plan_id         INT NOT NULL,
    session_date    DATETIME2 NOT NULL,
    procedure_done  NVARCHAR(500) NULL,
    session_cost    DECIMAL(18,2) NULL,
    CONSTRAINT FK_TreatmentSessions_Plan FOREIGN KEY (plan_id) REFERENCES TreatmentPlans(plan_id),
    CONSTRAINT CK_TreatmentSessions_Cost CHECK (session_cost IS NULL OR session_cost >= 0)
);
GO

CREATE TABLE Prescriptions (
    prescription_id INT IDENTITY(1,1) PRIMARY KEY,
    patient_id      INT NOT NULL,
    dentist_id      INT NULL,
    created_at      DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    notes           NVARCHAR(500) NULL,
    CONSTRAINT FK_Prescriptions_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_Prescriptions_Dentist FOREIGN KEY (dentist_id) REFERENCES Users(user_id)
);
GO

CREATE TABLE PrescriptionItems (
    item_id         INT IDENTITY(1,1) PRIMARY KEY,
    prescription_id INT NOT NULL,
    medication_name VARCHAR(200) NOT NULL,
    dosage          VARCHAR(100) NULL,
    duration        VARCHAR(100) NULL,
    instructions    NVARCHAR(300) NULL,
    CONSTRAINT FK_PrescriptionItems_Prescriptions FOREIGN KEY (prescription_id) REFERENCES Prescriptions(prescription_id)
);
GO

-- ======================================================
-- 5️⃣ INVENTORY MANAGEMENT
-- ======================================================
IF OBJECT_ID('dbo.StockTransactions','U') IS NOT NULL DROP TABLE dbo.StockTransactions;
IF OBJECT_ID('dbo.InventoryItems','U')   IS NOT NULL DROP TABLE dbo.InventoryItems;
GO

CREATE TABLE InventoryItems (
    item_id     INT IDENTITY(1,1) PRIMARY KEY,
    name        VARCHAR(200) NOT NULL,
    unit        VARCHAR(50) NULL,
    quantity    INT NOT NULL DEFAULT 0,
    min_stock   INT NOT NULL DEFAULT 0,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT CK_Inventory_Positive CHECK (quantity >= 0 AND min_stock >= 0)
);
GO
CREATE UNIQUE INDEX UX_InventoryItems_Name ON InventoryItems(name);
GO

CREATE TABLE StockTransactions (
    transaction_id   INT IDENTITY(1,1) PRIMARY KEY,
    item_id          INT NOT NULL,
    transaction_type VARCHAR(20) NOT NULL, -- IN / OUT
    quantity         INT NOT NULL,
    performed_by     INT NULL,
    performed_at     DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_StockTransactions_Item FOREIGN KEY (item_id) REFERENCES InventoryItems(item_id),
    CONSTRAINT FK_StockTransactions_User FOREIGN KEY (performed_by) REFERENCES Users(user_id),
    CONSTRAINT CK_StockTransactions_Type CHECK (transaction_type IN ('IN','OUT')),
    CONSTRAINT CK_StockTransactions_Qty CHECK (quantity > 0)
);
GO

-- ======================================================
-- 6️⃣ BILLING & PAYMENT
-- ======================================================
IF OBJECT_ID('dbo.Payments','U')     IS NOT NULL DROP TABLE dbo.Payments;
IF OBJECT_ID('dbo.InvoiceItems','U') IS NOT NULL DROP TABLE dbo.InvoiceItems;
IF OBJECT_ID('dbo.Invoices','U')     IS NOT NULL DROP TABLE dbo.Invoices;
GO

CREATE TABLE Invoices (
    invoice_id     INT IDENTITY(1,1) PRIMARY KEY,
    patient_id     INT NOT NULL,
    appointment_id INT NULL,
    total_amount   DECIMAL(18,2) NOT NULL DEFAULT 0,
    discount_amount DECIMAL(18,2) NOT NULL DEFAULT 0,
    net_amount     AS (total_amount - discount_amount),
    status         VARCHAR(50) NOT NULL DEFAULT 'UNPAID',
    created_at     DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_Invoices_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_Invoices_Appointment FOREIGN KEY (appointment_id) REFERENCES Appointments(appointment_id)
);
GO

CREATE TABLE InvoiceItems (
    item_id     INT IDENTITY(1,1) PRIMARY KEY,
    invoice_id  INT NOT NULL,
    service_id  INT NULL,
    quantity    INT NOT NULL DEFAULT 1,
    unit_price  DECIMAL(18,2) NOT NULL,
    total_price AS (quantity * unit_price),
    CONSTRAINT FK_InvoiceItems_Invoice FOREIGN KEY (invoice_id) REFERENCES Invoices(invoice_id),
    CONSTRAINT FK_InvoiceItems_Service FOREIGN KEY (service_id) REFERENCES Services(service_id)
);
GO

CREATE TABLE Payments (
    payment_id  INT IDENTITY(1,1) PRIMARY KEY,
    invoice_id  INT NOT NULL,
    amount      DECIMAL(18,2) NOT NULL,
    method      VARCHAR(50) NOT NULL DEFAULT 'CASH',
    paid_at     DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_Payments_Invoice FOREIGN KEY (invoice_id) REFERENCES Invoices(invoice_id)
);
GO

-- ======================================================
-- 1️⃣bis Doctor Schedule
-- ======================================================
IF OBJECT_ID('dbo.DoctorSchedules','U') IS NOT NULL DROP TABLE dbo.DoctorSchedules;
GO
CREATE TABLE DoctorSchedules (
    schedule_id INT IDENTITY(1,1) PRIMARY KEY,
    doctor_id   INT NOT NULL,
    work_date   DATE NOT NULL,
    shift       VARCHAR(50) NOT NULL,
    start_time  TIME  NULL,
    end_time    TIME  NULL,
    room_no     VARCHAR(50) NULL,
    status      VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_DoctorSchedules_Doctor FOREIGN KEY (doctor_id) REFERENCES Users(user_id)
);
GO

-- ======================================================
-- 3️⃣bis Appointment Requests (Online)
-- ======================================================
IF OBJECT_ID('dbo.AppointmentRequests','U') IS NOT NULL DROP TABLE dbo.AppointmentRequests;
GO
CREATE TABLE AppointmentRequests (
    request_id          INT IDENTITY(1,1) PRIMARY KEY,
    patient_id          INT NULL,
    full_name           VARCHAR(200) NULL,
    phone               VARCHAR(50) NULL,
    email               VARCHAR(150) NULL,
    service_id          INT NULL,
    preferred_doctor_id INT NULL,
    preferred_date      DATE NOT NULL,
    preferred_shift     VARCHAR(50) NULL,
    notes               NVARCHAR(500) NULL,
    status              VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    otp_code            VARCHAR(10) NULL,
    otp_expires_at      DATETIME2 NULL,
    created_at          DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    confirmed_at        DATETIME2 NULL,
    CONSTRAINT FK_Req_Service   FOREIGN KEY (service_id) REFERENCES Services(service_id),
    CONSTRAINT FK_Req_Doctor    FOREIGN KEY (preferred_doctor_id) REFERENCES Users(user_id),
    CONSTRAINT FK_Req_Patient   FOREIGN KEY (patient_id) REFERENCES Patients(patient_id)
);
GO

-- ======================================================
-- 🔒 TRIGGER chống trùng giờ
-- ======================================================
IF OBJECT_ID('dbo.TR_Appointments_NoOverlap','TR') IS NOT NULL
    DROP TRIGGER dbo.TR_Appointments_NoOverlap;
GO
CREATE TRIGGER TR_Appointments_NoOverlap
ON Appointments
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    ;WITH ap AS (
        SELECT i.appointment_id, i.dentist_id, i.service_id,
               i.appointment_date AS a_start,
               DATEADD(MINUTE, ISNULL(s.duration_minutes,30), i.appointment_date) AS a_end
        FROM inserted i
        LEFT JOIN Services s ON s.service_id = i.service_id
        WHERE i.dentist_id IS NOT NULL
    )
    IF EXISTS (
        SELECT 1
        FROM ap a
        JOIN Appointments x
          ON x.dentist_id = a.dentist_id
         AND x.appointment_id <> a.appointment_id
         AND x.status IN ('SCHEDULED','CONFIRMED')
        LEFT JOIN Services sx ON sx.service_id = x.service_id
        CROSS APPLY (
            SELECT x.appointment_date AS x_start,
                   DATEADD(MINUTE, ISNULL(sx.duration_minutes,30), x.appointment_date) AS x_end
        ) t
        WHERE a.a_start < t.x_end
          AND a.a_end   > t.x_start
    )
    BEGIN
        RAISERROR (N'Lịch hẹn trùng giờ của bác sĩ.', 16, 1);
        ROLLBACK TRANSACTION;
        RETURN;
    END
END;
GO

-- ======================================================
-- 7️⃣ SEED DATA
-- ======================================================
TRUNCATE TABLE Roles;
TRUNCATE TABLE Users;
TRUNCATE TABLE Employees;

INSERT INTO Roles (role_name)
VALUES ('Administrator'), ('ClinicManager'), ('Dentist'), ('Receptionist'), ('Patient');

INSERT INTO Users (username, email, password_hash, full_name, phone, role_id)
VALUES 
('admin','admin@clinic.com','HASHED_PASSWORD','System Admin','0900000000',1),
('dr.john','john@clinic.com','HASHED_PASSWORD','Dr. John Doe','0911111111',3),
('reception1','recp@clinic.com','HASHED_PASSWORD','Reception Staff','0922222222',4);
GO

DECLARE @docId INT = (SELECT user_id FROM Users WHERE username='dr.john');
IF NOT EXISTS (SELECT 1 FROM DoctorSchedules WHERE doctor_id=@docId AND work_date=CAST(SYSUTCDATETIME() AS DATE))
BEGIN
    INSERT INTO DoctorSchedules(doctor_id, work_date, shift, start_time, end_time, room_no, status)
    VALUES
    (@docId, CAST(SYSUTCDATETIME() AS DATE), 'Morning', '08:00', '12:00', 'R1', 'ACTIVE'),
    (@docId, CAST(SYSUTCDATETIME() AS DATE), 'Afternoon', '13:00', '17:00', 'R1', 'ACTIVE');
END
GO
PRINT '✅ DentalClinicDB_MVP schema created successfully.';


