-- ===================================================================
-- ü¶∑ Dental Clinic Management System (MVP Version) - FIXED & CLEANED
-- SQL Server Script - Minimal schema + Online Booking + Schedules
-- ===================================================================


use master
IF DB_ID('DentalClinicDB_MVP') IS NOT NULL
BEGIN
    ALTER DATABASE DentalClinicDB_MVP SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE DentalClinicDB_MVP;
END
GO

CREATE DATABASE DentalClinicDB_MVP;
GO
USE DentalClinicDB_MVP;
GO



-- ======================================================
-- 1Ô∏è‚É£ USER & ROLE MANAGEMENT
-- ======================================================
IF OBJECT_ID('dbo.Roles','U') IS NOT NULL DROP TABLE dbo.Roles;
IF OBJECT_ID('dbo.Users','U') IS NOT NULL DROP TABLE dbo.Users;
IF OBJECT_ID('dbo.Employees','U') IS NOT NULL DROP TABLE dbo.Employees;
GO

CREATE TABLE Roles (
    role_id   INT IDENTITY(1,1) PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL UNIQUE
);
GO

CREATE TABLE Users (
    user_id     INT IDENTITY(1,1) PRIMARY KEY,
    username    VARCHAR(100) NOT NULL UNIQUE,
    email       VARCHAR(200) NOT NULL UNIQUE,
    password_hash VARCHAR(500) NULL,
    full_name   VARCHAR(200) NULL,
    phone       VARCHAR(50)  NULL,
    role_id     INT NOT NULL,
    is_active   BIT NOT NULL DEFAULT 1,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_Users_Roles FOREIGN KEY (role_id) REFERENCES Roles(role_id)
);
GO

CREATE TABLE Employees (
    employee_id INT IDENTITY(1,1) PRIMARY KEY,
    user_id     INT NOT NULL,
    position    VARCHAR(100),
    hire_date   DATE NULL,
    CONSTRAINT FK_Employees_Users FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
GO

-- ======================================================
-- 2Ô∏è‚É£ PATIENT MANAGEMENT
-- ======================================================
IF OBJECT_ID('dbo.PatientFiles','U') IS NOT NULL DROP TABLE dbo.PatientFiles;
IF OBJECT_ID('dbo.Patients','U')     IS NOT NULL DROP TABLE dbo.Patients;
GO

CREATE TABLE Patients (
    patient_id  INT IDENTITY(1,1) PRIMARY KEY,
    full_name   VARCHAR(200) NOT NULL,
    birth_date  DATE NULL,
    gender      CHAR(1) NULL,                    -- M/F/O
    phone       VARCHAR(50) NULL,
    email       VARCHAR(150) NULL,
    address     VARCHAR(300) NULL,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    user_id     INT NULL,
    CONSTRAINT FK_Patients_Users FOREIGN KEY (user_id) REFERENCES Users(user_id),
    CONSTRAINT CK_Patients_Gender CHECK (gender IS NULL OR gender IN ('M','F','O'))
);
GO

-- Create filtered unique index for user_id (only applies to non-null values)
CREATE UNIQUE INDEX IX_Patients_UserID_NotNull
ON Patients(user_id)
WHERE user_id IS NOT NULL;
GO

CREATE TABLE PatientFiles (
    file_id     INT IDENTITY(1,1) PRIMARY KEY,
    patient_id  INT NOT NULL,
    content     VARCHAR(MAX) NULL,
    uploaded_at DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_PatientFiles_Patients FOREIGN KEY (patient_id) REFERENCES Patients(patient_id)
);
GO

-- ======================================================
-- 3Ô∏è‚É£ APPOINTMENT & QUEUE
-- ======================================================
IF OBJECT_ID('dbo.WaitingQueue','U')   IS NOT NULL DROP TABLE dbo.WaitingQueue;
IF OBJECT_ID('dbo.Appointments','U')   IS NOT NULL DROP TABLE dbo.Appointments;
IF OBJECT_ID('dbo.Services','U')       IS NOT NULL DROP TABLE dbo.Services;
GO

CREATE TABLE Services (
    service_id        INT IDENTITY(1,1) PRIMARY KEY,
    name              VARCHAR(150) NOT NULL,
    description       NVARCHAR(500) NULL,
    price             DECIMAL(18,2) NOT NULL,
    duration_minutes  INT NULL,
    is_active         BIT NOT NULL DEFAULT 1,
    CONSTRAINT CK_Services_Price CHECK (price >= 0),
    CONSTRAINT CK_Services_Duration CHECK (duration_minutes IS NULL OR duration_minutes > 0)
);
GO
CREATE UNIQUE INDEX UX_Services_Name ON Services(name);
GO

CREATE TABLE Appointments (
    appointment_id    INT IDENTITY(1,1) PRIMARY KEY,
    patient_id        INT NOT NULL,
    dentist_id        INT  NOT NULL,
    service_id        INT  NOT NULL,
    appointment_date  DATETIME2 NOT NULL,
    status            VARCHAR(50) NOT NULL DEFAULT 'SCHEDULED',
    notes             NVARCHAR(500) NULL,
    created_at        DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),

    -- üîπ NEW FIXED COLUMN
    source            VARCHAR(20) NOT NULL DEFAULT 'INTERNAL',   -- INTERNAL / ONLINE

    booking_channel   VARCHAR(20) NULL,                          -- WEB / MOBILE / KIOSK
    created_by_patient_id INT NULL,
    created_by_user_id    INT NULL,
    confirmation_code VARCHAR(10) NULL,
    confirmed_at      DATETIME2 NULL,

    CONSTRAINT FK_Appointments_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_Appointments_Dentist FOREIGN KEY (dentist_id) REFERENCES Users(user_id),
    CONSTRAINT FK_Appointments_Service FOREIGN KEY (service_id) REFERENCES Services(service_id),
    CONSTRAINT FK_Appointments_CreatedByPatient FOREIGN KEY (created_by_patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_Appointments_CreatedByUser FOREIGN KEY (created_by_user_id) REFERENCES Users(user_id),
    CONSTRAINT CK_Appointments_Status CHECK (status IN ('SCHEDULED','CONFIRMED','COMPLETED','CANCELLED')),
    CONSTRAINT CK_Appointments_Source CHECK (source IN ('INTERNAL','ONLINE')),
    CONSTRAINT CK_Appointments_BookingChannel CHECK (booking_channel IS NULL OR booking_channel IN ('WEB','MOBILE','KIOSK'))
);
GO

CREATE INDEX IX_Appointments_PatientDate ON Appointments(patient_id, appointment_date);
CREATE INDEX IX_Appointments_DentistDate ON Appointments(dentist_id, appointment_date);
GO

CREATE TABLE WaitingQueue (
    queue_id          INT IDENTITY(1,1) PRIMARY KEY,
    appointment_id    INT NOT NULL UNIQUE,
    position_in_queue INT NULL,
    status            VARCHAR(50) NOT NULL DEFAULT 'WAITING', -- WAITING / CHECKED_IN / CALLED / IN_TREATMENT / COMPLETED / NO_SHOW
    CONSTRAINT FK_WaitingQueue_Appointments FOREIGN KEY (appointment_id) REFERENCES Appointments(appointment_id),
    CONSTRAINT CK_WaitingQueue_Status CHECK (status IN ('WAITING','CHECKED_IN','CALLED','IN_TREATMENT','COMPLETED','NO_SHOW'))
);
GO

-- ======================================================
-- 4Ô∏è‚É£ MEDICAL RECORDS & TREATMENT
-- ======================================================
IF OBJECT_ID('dbo.PrescriptionItems','U') IS NOT NULL DROP TABLE dbo.PrescriptionItems;
IF OBJECT_ID('dbo.Prescriptions','U')     IS NOT NULL DROP TABLE dbo.Prescriptions;
IF OBJECT_ID('dbo.TreatmentSessions','U') IS NOT NULL DROP TABLE dbo.TreatmentSessions;
IF OBJECT_ID('dbo.TreatmentPlans','U')    IS NOT NULL DROP TABLE dbo.TreatmentPlans;
IF OBJECT_ID('dbo.Examinations','U')      IS NOT NULL DROP TABLE dbo.Examinations;
IF OBJECT_ID('dbo.MedicalRecords','U')    IS NOT NULL DROP TABLE dbo.MedicalRecords;
GO

CREATE TABLE MedicalRecords (
    record_id   INT IDENTITY(1,1) PRIMARY KEY,
    patient_id  INT NOT NULL,
    dentist_id  INT NULL,
    summary     NVARCHAR(MAX) NULL,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_MedicalRecords_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_MedicalRecords_Dentist FOREIGN KEY (dentist_id) REFERENCES Users(user_id)
);
GO

CREATE TABLE Examinations (
    exam_id     INT IDENTITY(1,1) PRIMARY KEY,
    record_id   INT NOT NULL,
    findings    NVARCHAR(MAX) NULL,
    diagnosis   NVARCHAR(MAX) NULL,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_Examinations_Record FOREIGN KEY (record_id) REFERENCES MedicalRecords(record_id)
);
GO

CREATE TABLE TreatmentPlans (
    plan_id         INT IDENTITY(1,1) PRIMARY KEY,
    record_id       INT NOT NULL,
    plan_summary    NVARCHAR(MAX) NULL,
    estimated_cost  DECIMAL(18,2) NULL,
    created_at      DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_TreatmentPlans_Record FOREIGN KEY (record_id) REFERENCES MedicalRecords(record_id),
    CONSTRAINT CK_TreatmentPlans_Cost CHECK (estimated_cost IS NULL OR estimated_cost >= 0)
);
GO

CREATE TABLE TreatmentSessions (
    session_id      INT IDENTITY(1,1) PRIMARY KEY,
    plan_id         INT NOT NULL,
    session_date    DATETIME2 NOT NULL,
    procedure_done  NVARCHAR(500) NULL,
    session_cost    DECIMAL(18,2) NULL,
    CONSTRAINT FK_TreatmentSessions_Plan FOREIGN KEY (plan_id) REFERENCES TreatmentPlans(plan_id),
    CONSTRAINT CK_TreatmentSessions_Cost CHECK (session_cost IS NULL OR session_cost >= 0)
);
GO

CREATE TABLE Prescriptions (
    prescription_id INT IDENTITY(1,1) PRIMARY KEY,
    patient_id      INT NOT NULL,
    dentist_id      INT NULL,
    created_at      DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    notes           NVARCHAR(500) NULL,
    CONSTRAINT FK_Prescriptions_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_Prescriptions_Dentist FOREIGN KEY (dentist_id) REFERENCES Users(user_id)
);
GO

CREATE TABLE PrescriptionItems (
    item_id         INT IDENTITY(1,1) PRIMARY KEY,
    prescription_id INT NOT NULL,
    medication_name VARCHAR(200) NOT NULL,
    dosage          VARCHAR(100) NULL,
    duration        VARCHAR(100) NULL,
    instructions    NVARCHAR(300) NULL,
    CONSTRAINT FK_PrescriptionItems_Prescriptions FOREIGN KEY (prescription_id) REFERENCES Prescriptions(prescription_id)
);
GO

-- ======================================================
-- 5Ô∏è‚É£ INVENTORY MANAGEMENT
-- ======================================================
IF OBJECT_ID('dbo.StockTransactions','U') IS NOT NULL DROP TABLE dbo.StockTransactions;
IF OBJECT_ID('dbo.InventoryItems','U')   IS NOT NULL DROP TABLE dbo.InventoryItems;
GO

CREATE TABLE InventoryItems (
    item_id     INT IDENTITY(1,1) PRIMARY KEY,
    name        VARCHAR(200) NOT NULL,
    unit        VARCHAR(50) NULL,
    quantity    INT NOT NULL DEFAULT 0,
    min_stock   INT NOT NULL DEFAULT 0,
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT CK_Inventory_Positive CHECK (quantity >= 0 AND min_stock >= 0)
);
GO
CREATE UNIQUE INDEX UX_InventoryItems_Name ON InventoryItems(name);
GO

CREATE TABLE StockTransactions (
    transaction_id   INT IDENTITY(1,1) PRIMARY KEY,
    item_id          INT NOT NULL,
    transaction_type VARCHAR(20) NOT NULL, -- IN / OUT
    quantity         INT NOT NULL,
    performed_by     INT NULL,
    performed_at     DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_StockTransactions_Item FOREIGN KEY (item_id) REFERENCES InventoryItems(item_id),
    CONSTRAINT FK_StockTransactions_User FOREIGN KEY (performed_by) REFERENCES Users(user_id),
    CONSTRAINT CK_StockTransactions_Type CHECK (transaction_type IN ('IN','OUT')),
    CONSTRAINT CK_StockTransactions_Qty CHECK (quantity > 0)
);
GO

-- ======================================================
-- 6Ô∏è‚É£ BILLING & PAYMENT
-- ======================================================
IF OBJECT_ID('dbo.Payments','U')     IS NOT NULL DROP TABLE dbo.Payments;
IF OBJECT_ID('dbo.InvoiceItems','U') IS NOT NULL DROP TABLE dbo.InvoiceItems;
IF OBJECT_ID('dbo.Invoices','U')     IS NOT NULL DROP TABLE dbo.Invoices;
GO

CREATE TABLE Invoices (
    invoice_id     INT IDENTITY(1,1) PRIMARY KEY,
    patient_id     INT NOT NULL,
    appointment_id INT NULL,
    total_amount   DECIMAL(18,2) NOT NULL DEFAULT 0,
    discount_amount DECIMAL(18,2) NOT NULL DEFAULT 0,
    net_amount     AS (total_amount - discount_amount),
    status         VARCHAR(50) NOT NULL DEFAULT 'UNPAID',
    created_at     DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_Invoices_Patient FOREIGN KEY (patient_id) REFERENCES Patients(patient_id),
    CONSTRAINT FK_Invoices_Appointment FOREIGN KEY (appointment_id) REFERENCES Appointments(appointment_id)
);
GO

CREATE TABLE InvoiceItems (
    item_id     INT IDENTITY(1,1) PRIMARY KEY,
    invoice_id  INT NOT NULL,
    service_id  INT NULL,
    quantity    INT NOT NULL DEFAULT 1,
    unit_price  DECIMAL(18,2) NOT NULL,
    total_price AS (quantity * unit_price),
    CONSTRAINT FK_InvoiceItems_Invoice FOREIGN KEY (invoice_id) REFERENCES Invoices(invoice_id),
    CONSTRAINT FK_InvoiceItems_Service FOREIGN KEY (service_id) REFERENCES Services(service_id)
);
GO

CREATE TABLE Payments (
    payment_id  INT IDENTITY(1,1) PRIMARY KEY,
    invoice_id  INT NOT NULL,
    amount      DECIMAL(18,2) NOT NULL,
    method      VARCHAR(50) NOT NULL DEFAULT 'CASH',
    paid_at     DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_Payments_Invoice FOREIGN KEY (invoice_id) REFERENCES Invoices(invoice_id)
);
GO

-- ======================================================
-- 1Ô∏è‚É£bis Doctor Schedule
-- ======================================================
IF OBJECT_ID('dbo.DoctorSchedules','U') IS NOT NULL DROP TABLE dbo.DoctorSchedules;
GO
CREATE TABLE DoctorSchedules (
    schedule_id INT IDENTITY(1,1) PRIMARY KEY,
    doctor_id   INT NOT NULL,
    work_date   DATE NOT NULL,
    shift       VARCHAR(50) NOT NULL,
    start_time  TIME  NULL,
    end_time    TIME  NULL,
    room_no     VARCHAR(50) NULL,
    notes       NVARCHAR(300) NULL,
    status      VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
    created_at  DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    CONSTRAINT FK_DoctorSchedules_Doctor FOREIGN KEY (doctor_id) REFERENCES Users(user_id)
);
GO

-- ======================================================
-- 3Ô∏è‚É£bis Appointment Requests (Online)
-- ======================================================
IF OBJECT_ID('dbo.AppointmentRequests','U') IS NOT NULL DROP TABLE dbo.AppointmentRequests;
GO
CREATE TABLE AppointmentRequests (
    request_id          INT IDENTITY(1,1) PRIMARY KEY,
    patient_id          INT NULL,
    full_name           VARCHAR(200) NULL,
    phone               VARCHAR(50) NULL,
    email               VARCHAR(150) NULL,
    service_id          INT NULL,
    preferred_doctor_id INT NULL,
    preferred_date      DATE NOT NULL,
    preferred_shift     VARCHAR(50) NULL,
    notes               NVARCHAR(500) NULL,
    status              VARCHAR(20) NOT NULL DEFAULT 'PENDING',
    otp_code            VARCHAR(10) NULL,
    otp_expires_at      DATETIME2 NULL,
    created_at          DATETIME2 NOT NULL DEFAULT SYSUTCDATETIME(),
    confirmed_at        DATETIME2 NULL,
    CONSTRAINT FK_Req_Service   FOREIGN KEY (service_id) REFERENCES Services(service_id),
    CONSTRAINT FK_Req_Doctor    FOREIGN KEY (preferred_doctor_id) REFERENCES Users(user_id),
    CONSTRAINT FK_Req_Patient   FOREIGN KEY (patient_id) REFERENCES Patients(patient_id)
);
GO

-- ======================================================
-- üîí TRIGGER ch·ªëng tr√πng gi·ªù
-- ======================================================
IF OBJECT_ID('dbo.TR_Appointments_NoOverlap','TR') IS NOT NULL
    DROP TRIGGER dbo.TR_Appointments_NoOverlap;
GO
CREATE TRIGGER TR_Appointments_NoOverlap
ON Appointments
AFTER INSERT, UPDATE
AS
BEGIN
    SET NOCOUNT ON;

    ;WITH ap AS (
        SELECT i.appointment_id, i.dentist_id, i.service_id,
               i.appointment_date AS a_start,
               DATEADD(MINUTE, ISNULL(s.duration_minutes,30), i.appointment_date) AS a_end
        FROM inserted i
        LEFT JOIN Services s ON s.service_id = i.service_id
        WHERE i.dentist_id IS NOT NULL
    )
    IF EXISTS (
        SELECT 1
        FROM ap a
        JOIN Appointments x
          ON x.dentist_id = a.dentist_id
         AND x.appointment_id <> a.appointment_id
         AND x.status IN ('SCHEDULED','CONFIRMED')
        LEFT JOIN Services sx ON sx.service_id = x.service_id
        CROSS APPLY (
            SELECT x.appointment_date AS x_start,
                   DATEADD(MINUTE, ISNULL(sx.duration_minutes,30), x.appointment_date) AS x_end
        ) t
        WHERE a.a_start < t.x_end
          AND a.a_end   > t.x_start
    )
    BEGIN
        RAISERROR (N'L·ªãch h·∫πn tr√πng gi·ªù c·ªßa b√°c sƒ©.', 16, 1);
        ROLLBACK TRANSACTION;
        RETURN;
    END
END;
GO

-- ======================================================
-- 7Ô∏è‚É£ SEED DATA - UPDATED WITH ALL CHANGES
-- ======================================================
TRUNCATE TABLE Roles;
TRUNCATE TABLE Users;
TRUNCATE TABLE Employees;
TRUNCATE TABLE DoctorSchedules;

-- Insert roles
INSERT INTO Roles (role_name)
VALUES ('Administrator'), ('ClinicManager'), ('Dentist'), ('Receptionist'), ('Patient');

-- Insert users with proper role assignments
INSERT INTO Users (username, email, password_hash, full_name, phone, role_id)
VALUES 
('admin','admin@clinic.com','HASHED_PASSWORD','System Admin','0900000000',1),
('dr.john','john@clinic.com','HASHED_PASSWORD','Dr. John Doe','0911111111',3),
('reception1','recp@clinic.com','HASHED_PASSWORD','Reception Staff','0922222222',4),
('dentist','dinhquocsang20013@gmail.com','HASHED_PASSWORD','ƒêinh Qu·ªëc Sang','0978366236',3);

-- Insert employees linked to users
INSERT INTO Employees (user_id, position, hire_date)
SELECT u.user_id, r.role_name, CAST(SYSUTCDATETIME() AS DATE)
FROM Users u
JOIN Roles r ON u.role_id = r.role_id
WHERE r.role_name IN ('Dentist', 'Receptionist', 'ClinicManager');
('admin','admin@clinic.com','1','System Admin','0900000000',1),
('dr.john','john@clinic.com','1','Dr. John Doe','0911111111',3),
('reception1','recp@clinic.com','1','Reception Staff','0922222222',4);
GO

-- Insert sample doctor schedules for testing
DECLARE @drJohnId INT = (SELECT user_id FROM Users WHERE username='dr.john');
DECLARE @dentistId INT = (SELECT user_id FROM Users WHERE username='dentist');

-- Sample schedules for Dr. John Doe
INSERT INTO DoctorSchedules(doctor_id, work_date, shift, start_time, end_time, room_no, status)
VALUES
(@drJohnId, '2025-10-20', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P001', 'ACTIVE'),
(@drJohnId, '2025-10-20', 'Chi·ªÅu (13:00-18:00)', '13:00:00', '18:00:00', 'P001', 'ACTIVE'),
(@drJohnId, '2025-10-21', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P001', 'ACTIVE'),
(@drJohnId, '2025-10-21', 'Chi·ªÅu (13:00-18:00)', '13:00:00', '18:00:00', 'P001', 'ACTIVE'),
(@drJohnId, '2025-10-22', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P001', 'ACTIVE'),
(@drJohnId, '2025-10-23', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P001', 'ACTIVE'),
(@drJohnId, '2025-10-24', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P001', 'ACTIVE'),
(@drJohnId, '2025-10-25', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P001', 'ACTIVE'),
(@drJohnId, '2025-10-26', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P001', 'ACTIVE');

-- Sample schedules for ƒêinh Qu·ªëc Sang
INSERT INTO DoctorSchedules(doctor_id, work_date, shift, start_time, end_time, room_no, status)
VALUES
(@dentistId, '2025-10-20', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P002', 'ACTIVE'),
(@dentistId, '2025-10-20', 'Chi·ªÅu (13:00-18:00)', '13:00:00', '18:00:00', 'P002', 'ACTIVE'),
(@dentistId, '2025-10-21', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P002', 'ACTIVE'),
(@dentistId, '2025-10-21', 'Chi·ªÅu (13:00-18:00)', '13:00:00', '18:00:00', 'P002', 'ACTIVE'),
(@dentistId, '2025-10-22', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P002', 'ACTIVE'),
(@dentistId, '2025-10-23', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P002', 'ACTIVE'),
(@dentistId, '2025-10-24', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P002', 'ACTIVE'),
(@dentistId, '2025-10-25', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P002', 'ACTIVE'),
(@dentistId, '2025-10-26', 'S√°ng (7:00-12:00)', '07:00:00', '12:00:00', 'P002', 'ACTIVE');

-- Insert sample services
INSERT INTO Services (name, description, price, duration_minutes, is_active)
VALUES
('Kh√°m t·ªïng qu√°t', 'Kh√°m rƒÉng t·ªïng qu√°t v√† t∆∞ v·∫•n', 200000, 30, 1),
('C·∫°o v√¥i rƒÉng', 'L√†m s·∫°ch v√¥i rƒÉng v√† cao rƒÉng', 300000, 45, 1),
('Tr√°m rƒÉng', 'Tr√°m rƒÉng s√¢u b·∫±ng composite', 400000, 60, 1),
('Nh·ªï rƒÉng', 'Nh·ªï rƒÉng kh√¥n ho·∫∑c rƒÉng s√¢u', 500000, 30, 1),
('Ni·ªÅng rƒÉng', 'ƒêi·ªÅu tr·ªã ch·ªânh nha', 5000000, 120, 1);

-- Insert sample patients
INSERT INTO Patients (full_name, birth_date, gender, phone, email, address, user_id)
VALUES
('Nguy·ªÖn VƒÉn A', '1990-01-15', 'M', '0987654321', 'nguyenvana@email.com', '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM', NULL),
('Tr·∫ßn Th·ªã B', '1985-05-20', 'F', '0987654322', 'tranthib@email.com', '456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 2, TP.HCM', NULL),
('L√™ VƒÉn C', '1992-08-10', 'M', '0987654323', 'levanc@email.com', '789 ƒê∆∞·ªùng DEF, Qu·∫≠n 3, TP.HCM', NULL);

GO

-- ======================================================
-- ‚úÖ 8. DOCTOR SCHEDULES SCHEMA IMPROVEMENTS
-- ======================================================

-- 8.1 Tr√°nh tr√πng ca (Unique Index)
IF NOT EXISTS (
    SELECT 1 FROM sys.indexes
    WHERE name = 'UQ_DoctorSchedules_DoctorDateShift'
      AND object_id = OBJECT_ID('DoctorSchedules')
)
BEGIN
    CREATE UNIQUE INDEX UQ_DoctorSchedules_DoctorDateShift
    ON DoctorSchedules (doctor_id, work_date, shift)
    WHERE status <> 'CANCELLED';
END
GO

-- 8.2 Ghi ch√∫ cho t·ª´ng ca (t√πy ch·ªçn) - Already exists as 'notes'
-- Note: Column 'notes' already exists in DoctorSchedules table

-- 8.3 Ch·ªâ s·ªë truy v·∫•n nhanh (Indexes for performance)

-- 8.3.1 Index theo ng√†y + ca + tr·∫°ng th√°i
IF NOT EXISTS (
    SELECT 1 FROM sys.indexes
    WHERE name = 'IX_DoctorSchedules_DateShift'
      AND object_id = OBJECT_ID('DoctorSchedules')
)
BEGIN
    CREATE INDEX IX_DoctorSchedules_DateShift
    ON DoctorSchedules (work_date, shift, status);
END
GO

-- 8.3.2 Index theo b√°c sƒ© + ng√†y
IF NOT EXISTS (
    SELECT 1 FROM sys.indexes
    WHERE name = 'IX_DoctorSchedules_DoctorDate'
      AND object_id = OBJECT_ID('DoctorSchedules')
)
BEGIN
    CREATE INDEX IX_DoctorSchedules_DoctorDate
    ON DoctorSchedules (doctor_id, work_date);
END
GO
INSERT INTO InventoryItems(name, unit, quantity, min_stock)
VALUES
('Gloves (box)', 'box', 50, 10),
('Masks (box)',  'box', 40, 10),
('Mouthwash',    'bottle', 20, 5);
GO
INSERT INTO Services(name, description, price, duration_minutes, is_active) VALUES
('Oral Examination', 'General oral health check', 100000, 20, 1),
('Teeth Cleaning', 'Scaling and polishing',       300000, 40, 1),
('Filling',        'Composite filling',           500000, 45, 1),
('Root Canal',     'Endodontic treatment',       1500000, 90, 1);
GO
PRINT '‚úÖ DentalClinicDB_MVP schema created successfully.';

-- 8.4 R√†ng bu·ªôc gi·ªù h·ª£p l·ªá (CHECK constraint)
IF NOT EXISTS (
    SELECT 1 FROM sys.check_constraints
    WHERE name = 'CK_DoctorSchedules_Time'
      AND parent_object_id = OBJECT_ID('DoctorSchedules')
)
BEGIN
    ALTER TABLE DoctorSchedules
    ADD CONSTRAINT CK_DoctorSchedules_Time CHECK (start_time < end_time);
END
GO

-- 8.5 Index cho t√¨m ki·∫øm theo tr·∫°ng th√°i
IF NOT EXISTS (
    SELECT 1 FROM sys.indexes
    WHERE name = 'IX_DoctorSchedules_Status'
      AND object_id = OBJECT_ID('DoctorSchedules')
)
BEGIN
    CREATE INDEX IX_DoctorSchedules_Status
    ON DoctorSchedules (status, work_date);
END
GO

-- 8.6 Index cho t√¨m ki·∫øm theo ph√≤ng
IF NOT EXISTS (
    SELECT 1 FROM sys.indexes
    WHERE name = 'IX_DoctorSchedules_Room'
      AND object_id = OBJECT_ID('DoctorSchedules')
)
BEGIN
    CREATE INDEX IX_DoctorSchedules_Room
    ON DoctorSchedules (room_no, work_date);
END
GO

PRINT '‚úÖ DentalClinicDB_MVP schema created successfully with all updates.';
PRINT 'üìä Database includes:';
PRINT '   - User & Role Management (Administrator, Dentist, Receptionist)';
PRINT '   - Employee Management with work schedules';
PRINT '   - Doctor Schedule Management with weekly assignments';
PRINT '   - Sample data for testing all features';
PRINT '   - Responsive UI improvements for schedule display';
PRINT '   - Performance indexes for fast queries';
PRINT '   - Data integrity constraints';
PRINT '   - Unique constraints to prevent duplicate schedules';






